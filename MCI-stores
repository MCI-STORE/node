// File: backend/server.js
const express = require('express');
const app = express();
const bodyParser = require('body-parser');
const { Pool } = require('pg');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// PostgreSQL pool setup
const pool = new Pool({
    user: 'yourusername',
    host: 'localhost',
    database: 'yourdatabase',
    password: 'yourpassword',
    port: 5432,
});

app.use(bodyParser.json());

// Authentication Middleware
const authenticateToken = (req, res, next) => {
    const token = req.headers['authorization'];
    if (!token) return res.sendStatus(401);
    jwt.verify(token, 'your_jwt_secret', (err, user) => {
        if (err) return res.sendStatus(403);
        req.user = user;
        next();
    });
};

// Register Endpoint
app.post('/register', async (req, res) => {
    const { username, password, role } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    try {
        const result = await pool.query(
            'INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING *',
            [username, hashedPassword, role]
        );
        res.status(201).json(result.rows[0]);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Login Endpoint
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    try {
        const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);
        const user = result.rows[0];
        if (user && await bcrypt.compare(password, user.password)) {
            const token = jwt.sign({ username: user.username, role: user.role }, 'your_jwt_secret');
            res.json({ token });
        } else {
            res.status(401).json({ error: 'Invalid credentials' });
        }
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// CRUD Endpoints for Assets
app.post('/assets', authenticateToken, async (req, res) => {
    const { name, type, location, status, model, serial_number } = req.body;
    try {
        const result = await pool.query(
            'INSERT INTO assets (name, type, location, status, model, serial_number) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *',
            [name, type, location, status, model, serial_number]
        );
        res.status(201).json(result.rows[0]);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.get('/assets', authenticateToken, async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM assets');
        res.status(200).json(result.rows);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.get('/assets/:id', authenticateToken, async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('SELECT * FROM assets WHERE asset_id = $1', [id]);
        if (result.rows.length === 0) {
            res.status(404).json({ error: 'Asset not found' });
        } else {
            res.status(200).json(result.rows[0]);
        }
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.put('/assets/:id', authenticateToken, async (req, res) => {
    const { id } = req.params;
    const { name, type, location, status, model, serial_number } = req.body;
    try {
        const result = await pool.query(
            'UPDATE assets SET name = $1, type = $2, location = $3, status = $4, model = $5, serial_number = $6 WHERE asset_id = $7 RETURNING *',
            [name, type, location, status, model, serial_number, id]
        );
        if (result.rows.length === 0) {
            res.status(404).json({ error: 'Asset not found' });
        } else {
            res.status(200).json(result.rows[0]);
        }
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.delete('/assets/:id', authenticateToken, async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('DELETE FROM assets WHERE asset_id = $1 RETURNING *', [id]);
        if (result.rows.length === 0) {
            res.status(404).json({ error: 'Asset not found' });
        } else {
            res.status(200).json(result.rows[0]);
        }
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});
